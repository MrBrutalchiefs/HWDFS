/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "communicate_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace comm {

int _kResponseCodeValues[] = {
  ResponseCode::SUCCESS,
  ResponseCode::NEED_D0,
  ResponseCode::ERROR
};
const char* _kResponseCodeNames[] = {
  "SUCCESS",
  "NEED_D0",
  "ERROR"
};
const std::map<int, const char*> _ResponseCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kResponseCodeValues, _kResponseCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ResponseCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ResponseCode_VALUES_TO_NAMES.find(val);
  if (it != _ResponseCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ResponseCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ResponseCode_VALUES_TO_NAMES.find(val);
  if (it != _ResponseCode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kDataTypeValues[] = {
  DataType::D0,
  DataType::DR,
  DataType::P0,
  DataType::PR
};
const char* _kDataTypeNames[] = {
  "D0",
  "DR",
  "P0",
  "PR"
};
const std::map<int, const char*> _DataType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kDataTypeValues, _kDataTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const DataType::type& val) {
  std::map<int, const char*>::const_iterator it = _DataType_VALUES_TO_NAMES.find(val);
  if (it != _DataType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const DataType::type& val) {
  std::map<int, const char*>::const_iterator it = _DataType_VALUES_TO_NAMES.find(val);
  if (it != _DataType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


Request::~Request() noexcept {
}


void Request::__set_from_id(const int16_t val) {
  this->from_id = val;
}

void Request::__set_to_id(const int16_t val) {
  this->to_id = val;
}

void Request::__set_scheme(const std::string& val) {
  this->scheme = val;
}

void Request::__set_data(const std::vector<int8_t> & val) {
  this->data = val;
}

void Request::__set_length(const int64_t val) {
  this->length = val;
}

void Request::__set_offset(const int64_t val) {
  this->offset = val;
}

void Request::__set_type(const DataType::type val) {
  this->type = val;
}

void Request::__set_partId(const int32_t val) {
  this->partId = val;
}
std::ostream& operator<<(std::ostream& out, const Request& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_from_id = false;
  bool isset_to_id = false;
  bool isset_scheme = false;
  bool isset_data = false;
  bool isset_length = false;
  bool isset_offset = false;
  bool isset_type = false;
  bool isset_partId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->from_id);
          isset_from_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->to_id);
          isset_to_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->scheme);
          isset_scheme = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->data.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->data.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->data[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->length);
          isset_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offset);
          isset_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->type = (DataType::type)ecast5;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partId);
          isset_partId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_from_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_to_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scheme)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_length)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_offset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Request");

  xfer += oprot->writeFieldBegin("from_id", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->from_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_id", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->to_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scheme", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->scheme);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->data.size()));
    std::vector<int8_t> ::const_iterator _iter6;
    for (_iter6 = this->data.begin(); _iter6 != this->data.end(); ++_iter6)
    {
      xfer += oprot->writeByte((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partId", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->partId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Request &a, Request &b) {
  using ::std::swap;
  swap(a.from_id, b.from_id);
  swap(a.to_id, b.to_id);
  swap(a.scheme, b.scheme);
  swap(a.data, b.data);
  swap(a.length, b.length);
  swap(a.offset, b.offset);
  swap(a.type, b.type);
  swap(a.partId, b.partId);
}

Request::Request(const Request& other7) {
  from_id = other7.from_id;
  to_id = other7.to_id;
  scheme = other7.scheme;
  data = other7.data;
  length = other7.length;
  offset = other7.offset;
  type = other7.type;
  partId = other7.partId;
}
Request& Request::operator=(const Request& other8) {
  from_id = other8.from_id;
  to_id = other8.to_id;
  scheme = other8.scheme;
  data = other8.data;
  length = other8.length;
  offset = other8.offset;
  type = other8.type;
  partId = other8.partId;
  return *this;
}
void Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Request(";
  out << "from_id=" << to_string(from_id);
  out << ", " << "to_id=" << to_string(to_id);
  out << ", " << "scheme=" << to_string(scheme);
  out << ", " << "data=" << to_string(data);
  out << ", " << "length=" << to_string(length);
  out << ", " << "offset=" << to_string(offset);
  out << ", " << "type=" << to_string(type);
  out << ", " << "partId=" << to_string(partId);
  out << ")";
}


Response::~Response() noexcept {
}


void Response::__set_code(const ResponseCode::type val) {
  this->code = val;
}

void Response::__set_data(const std::vector<int8_t> & val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const Response& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code = false;
  bool isset_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->code = (ResponseCode::type)ecast9;
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->data.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->data.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readByte(this->data[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Response");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->data.size()));
    std::vector<int8_t> ::const_iterator _iter15;
    for (_iter15 = this->data.begin(); _iter15 != this->data.end(); ++_iter15)
    {
      xfer += oprot->writeByte((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Response &a, Response &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.data, b.data);
}

Response::Response(const Response& other16) {
  code = other16.code;
  data = other16.data;
}
Response& Response::operator=(const Response& other17) {
  code = other17.code;
  data = other17.data;
  return *this;
}
void Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Response(";
  out << "code=" << to_string(code);
  out << ", " << "data=" << to_string(data);
  out << ")";
}

} // namespace
