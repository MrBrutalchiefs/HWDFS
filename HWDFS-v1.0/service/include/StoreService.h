/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StoreService_H
#define StoreService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "communicate_types.h"

namespace comm {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StoreServiceIf {
 public:
  virtual ~StoreServiceIf() {}
  virtual void create(Response& _return, const Request& request) = 0;
  virtual void write(Response& _return, const Request& request) = 0;
  virtual void read(Response& _return, const Request& request) = 0;
  virtual void degrade_read(Response& _return, const Request& request) = 0;
  virtual void merge(Response& _return, const Request& request) = 0;
  virtual void clear(Response& _return, const Request& request) = 0;
};

class StoreServiceIfFactory {
 public:
  typedef StoreServiceIf Handler;

  virtual ~StoreServiceIfFactory() {}

  virtual StoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StoreServiceIf* /* handler */) = 0;
};

class StoreServiceIfSingletonFactory : virtual public StoreServiceIfFactory {
 public:
  StoreServiceIfSingletonFactory(const ::std::shared_ptr<StoreServiceIf>& iface) : iface_(iface) {}
  virtual ~StoreServiceIfSingletonFactory() {}

  virtual StoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StoreServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<StoreServiceIf> iface_;
};

class StoreServiceNull : virtual public StoreServiceIf {
 public:
  virtual ~StoreServiceNull() {}
  void create(Response& /* _return */, const Request& /* request */) {
    return;
  }
  void write(Response& /* _return */, const Request& /* request */) {
    return;
  }
  void read(Response& /* _return */, const Request& /* request */) {
    return;
  }
  void degrade_read(Response& /* _return */, const Request& /* request */) {
    return;
  }
  void merge(Response& /* _return */, const Request& /* request */) {
    return;
  }
  void clear(Response& /* _return */, const Request& /* request */) {
    return;
  }
};

typedef struct _StoreService_create_args__isset {
  _StoreService_create_args__isset() : request(false) {}
  bool request :1;
} _StoreService_create_args__isset;

class StoreService_create_args {
 public:

  StoreService_create_args(const StoreService_create_args&);
  StoreService_create_args& operator=(const StoreService_create_args&);
  StoreService_create_args() {
  }

  virtual ~StoreService_create_args() noexcept;
  Request request;

  _StoreService_create_args__isset __isset;

  void __set_request(const Request& val);

  bool operator == (const StoreService_create_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StoreService_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StoreService_create_pargs {
 public:


  virtual ~StoreService_create_pargs() noexcept;
  const Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_create_result__isset {
  _StoreService_create_result__isset() : success(false) {}
  bool success :1;
} _StoreService_create_result__isset;

class StoreService_create_result {
 public:

  StoreService_create_result(const StoreService_create_result&);
  StoreService_create_result& operator=(const StoreService_create_result&);
  StoreService_create_result() {
  }

  virtual ~StoreService_create_result() noexcept;
  Response success;

  _StoreService_create_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const StoreService_create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StoreService_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_create_presult__isset {
  _StoreService_create_presult__isset() : success(false) {}
  bool success :1;
} _StoreService_create_presult__isset;

class StoreService_create_presult {
 public:


  virtual ~StoreService_create_presult() noexcept;
  Response* success;

  _StoreService_create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StoreService_write_args__isset {
  _StoreService_write_args__isset() : request(false) {}
  bool request :1;
} _StoreService_write_args__isset;

class StoreService_write_args {
 public:

  StoreService_write_args(const StoreService_write_args&);
  StoreService_write_args& operator=(const StoreService_write_args&);
  StoreService_write_args() {
  }

  virtual ~StoreService_write_args() noexcept;
  Request request;

  _StoreService_write_args__isset __isset;

  void __set_request(const Request& val);

  bool operator == (const StoreService_write_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StoreService_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StoreService_write_pargs {
 public:


  virtual ~StoreService_write_pargs() noexcept;
  const Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_write_result__isset {
  _StoreService_write_result__isset() : success(false) {}
  bool success :1;
} _StoreService_write_result__isset;

class StoreService_write_result {
 public:

  StoreService_write_result(const StoreService_write_result&);
  StoreService_write_result& operator=(const StoreService_write_result&);
  StoreService_write_result() {
  }

  virtual ~StoreService_write_result() noexcept;
  Response success;

  _StoreService_write_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const StoreService_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StoreService_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_write_presult__isset {
  _StoreService_write_presult__isset() : success(false) {}
  bool success :1;
} _StoreService_write_presult__isset;

class StoreService_write_presult {
 public:


  virtual ~StoreService_write_presult() noexcept;
  Response* success;

  _StoreService_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StoreService_read_args__isset {
  _StoreService_read_args__isset() : request(false) {}
  bool request :1;
} _StoreService_read_args__isset;

class StoreService_read_args {
 public:

  StoreService_read_args(const StoreService_read_args&);
  StoreService_read_args& operator=(const StoreService_read_args&);
  StoreService_read_args() {
  }

  virtual ~StoreService_read_args() noexcept;
  Request request;

  _StoreService_read_args__isset __isset;

  void __set_request(const Request& val);

  bool operator == (const StoreService_read_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StoreService_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StoreService_read_pargs {
 public:


  virtual ~StoreService_read_pargs() noexcept;
  const Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_read_result__isset {
  _StoreService_read_result__isset() : success(false) {}
  bool success :1;
} _StoreService_read_result__isset;

class StoreService_read_result {
 public:

  StoreService_read_result(const StoreService_read_result&);
  StoreService_read_result& operator=(const StoreService_read_result&);
  StoreService_read_result() {
  }

  virtual ~StoreService_read_result() noexcept;
  Response success;

  _StoreService_read_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const StoreService_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StoreService_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_read_presult__isset {
  _StoreService_read_presult__isset() : success(false) {}
  bool success :1;
} _StoreService_read_presult__isset;

class StoreService_read_presult {
 public:


  virtual ~StoreService_read_presult() noexcept;
  Response* success;

  _StoreService_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StoreService_degrade_read_args__isset {
  _StoreService_degrade_read_args__isset() : request(false) {}
  bool request :1;
} _StoreService_degrade_read_args__isset;

class StoreService_degrade_read_args {
 public:

  StoreService_degrade_read_args(const StoreService_degrade_read_args&);
  StoreService_degrade_read_args& operator=(const StoreService_degrade_read_args&);
  StoreService_degrade_read_args() {
  }

  virtual ~StoreService_degrade_read_args() noexcept;
  Request request;

  _StoreService_degrade_read_args__isset __isset;

  void __set_request(const Request& val);

  bool operator == (const StoreService_degrade_read_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StoreService_degrade_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_degrade_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StoreService_degrade_read_pargs {
 public:


  virtual ~StoreService_degrade_read_pargs() noexcept;
  const Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_degrade_read_result__isset {
  _StoreService_degrade_read_result__isset() : success(false) {}
  bool success :1;
} _StoreService_degrade_read_result__isset;

class StoreService_degrade_read_result {
 public:

  StoreService_degrade_read_result(const StoreService_degrade_read_result&);
  StoreService_degrade_read_result& operator=(const StoreService_degrade_read_result&);
  StoreService_degrade_read_result() {
  }

  virtual ~StoreService_degrade_read_result() noexcept;
  Response success;

  _StoreService_degrade_read_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const StoreService_degrade_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StoreService_degrade_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_degrade_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_degrade_read_presult__isset {
  _StoreService_degrade_read_presult__isset() : success(false) {}
  bool success :1;
} _StoreService_degrade_read_presult__isset;

class StoreService_degrade_read_presult {
 public:


  virtual ~StoreService_degrade_read_presult() noexcept;
  Response* success;

  _StoreService_degrade_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StoreService_merge_args__isset {
  _StoreService_merge_args__isset() : request(false) {}
  bool request :1;
} _StoreService_merge_args__isset;

class StoreService_merge_args {
 public:

  StoreService_merge_args(const StoreService_merge_args&);
  StoreService_merge_args& operator=(const StoreService_merge_args&);
  StoreService_merge_args() {
  }

  virtual ~StoreService_merge_args() noexcept;
  Request request;

  _StoreService_merge_args__isset __isset;

  void __set_request(const Request& val);

  bool operator == (const StoreService_merge_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StoreService_merge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_merge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StoreService_merge_pargs {
 public:


  virtual ~StoreService_merge_pargs() noexcept;
  const Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_merge_result__isset {
  _StoreService_merge_result__isset() : success(false) {}
  bool success :1;
} _StoreService_merge_result__isset;

class StoreService_merge_result {
 public:

  StoreService_merge_result(const StoreService_merge_result&);
  StoreService_merge_result& operator=(const StoreService_merge_result&);
  StoreService_merge_result() {
  }

  virtual ~StoreService_merge_result() noexcept;
  Response success;

  _StoreService_merge_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const StoreService_merge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StoreService_merge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_merge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_merge_presult__isset {
  _StoreService_merge_presult__isset() : success(false) {}
  bool success :1;
} _StoreService_merge_presult__isset;

class StoreService_merge_presult {
 public:


  virtual ~StoreService_merge_presult() noexcept;
  Response* success;

  _StoreService_merge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StoreService_clear_args__isset {
  _StoreService_clear_args__isset() : request(false) {}
  bool request :1;
} _StoreService_clear_args__isset;

class StoreService_clear_args {
 public:

  StoreService_clear_args(const StoreService_clear_args&);
  StoreService_clear_args& operator=(const StoreService_clear_args&);
  StoreService_clear_args() {
  }

  virtual ~StoreService_clear_args() noexcept;
  Request request;

  _StoreService_clear_args__isset __isset;

  void __set_request(const Request& val);

  bool operator == (const StoreService_clear_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StoreService_clear_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_clear_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StoreService_clear_pargs {
 public:


  virtual ~StoreService_clear_pargs() noexcept;
  const Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_clear_result__isset {
  _StoreService_clear_result__isset() : success(false) {}
  bool success :1;
} _StoreService_clear_result__isset;

class StoreService_clear_result {
 public:

  StoreService_clear_result(const StoreService_clear_result&);
  StoreService_clear_result& operator=(const StoreService_clear_result&);
  StoreService_clear_result() {
  }

  virtual ~StoreService_clear_result() noexcept;
  Response success;

  _StoreService_clear_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const StoreService_clear_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StoreService_clear_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreService_clear_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoreService_clear_presult__isset {
  _StoreService_clear_presult__isset() : success(false) {}
  bool success :1;
} _StoreService_clear_presult__isset;

class StoreService_clear_presult {
 public:


  virtual ~StoreService_clear_presult() noexcept;
  Response* success;

  _StoreService_clear_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StoreServiceClient : virtual public StoreServiceIf {
 public:
  StoreServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StoreServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void create(Response& _return, const Request& request);
  void send_create(const Request& request);
  void recv_create(Response& _return);
  void write(Response& _return, const Request& request);
  void send_write(const Request& request);
  void recv_write(Response& _return);
  void read(Response& _return, const Request& request);
  void send_read(const Request& request);
  void recv_read(Response& _return);
  void degrade_read(Response& _return, const Request& request);
  void send_degrade_read(const Request& request);
  void recv_degrade_read(Response& _return);
  void merge(Response& _return, const Request& request);
  void send_merge(const Request& request);
  void recv_merge(Response& _return);
  void clear(Response& _return, const Request& request);
  void send_clear(const Request& request);
  void recv_clear(Response& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StoreServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<StoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StoreServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_degrade_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_merge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StoreServiceProcessor(::std::shared_ptr<StoreServiceIf> iface) :
    iface_(iface) {
    processMap_["create"] = &StoreServiceProcessor::process_create;
    processMap_["write"] = &StoreServiceProcessor::process_write;
    processMap_["read"] = &StoreServiceProcessor::process_read;
    processMap_["degrade_read"] = &StoreServiceProcessor::process_degrade_read;
    processMap_["merge"] = &StoreServiceProcessor::process_merge;
    processMap_["clear"] = &StoreServiceProcessor::process_clear;
  }

  virtual ~StoreServiceProcessor() {}
};

class StoreServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StoreServiceProcessorFactory(const ::std::shared_ptr< StoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< StoreServiceIfFactory > handlerFactory_;
};

class StoreServiceMultiface : virtual public StoreServiceIf {
 public:
  StoreServiceMultiface(std::vector<std::shared_ptr<StoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StoreServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<StoreServiceIf> > ifaces_;
  StoreServiceMultiface() {}
  void add(::std::shared_ptr<StoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void create(Response& _return, const Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create(_return, request);
    }
    ifaces_[i]->create(_return, request);
    return;
  }

  void write(Response& _return, const Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write(_return, request);
    }
    ifaces_[i]->write(_return, request);
    return;
  }

  void read(Response& _return, const Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, request);
    }
    ifaces_[i]->read(_return, request);
    return;
  }

  void degrade_read(Response& _return, const Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->degrade_read(_return, request);
    }
    ifaces_[i]->degrade_read(_return, request);
    return;
  }

  void merge(Response& _return, const Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->merge(_return, request);
    }
    ifaces_[i]->merge(_return, request);
    return;
  }

  void clear(Response& _return, const Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear(_return, request);
    }
    ifaces_[i]->clear(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class StoreServiceConcurrentClient : virtual public StoreServiceIf {
 public:
  StoreServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  StoreServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void create(Response& _return, const Request& request);
  int32_t send_create(const Request& request);
  void recv_create(Response& _return, const int32_t seqid);
  void write(Response& _return, const Request& request);
  int32_t send_write(const Request& request);
  void recv_write(Response& _return, const int32_t seqid);
  void read(Response& _return, const Request& request);
  int32_t send_read(const Request& request);
  void recv_read(Response& _return, const int32_t seqid);
  void degrade_read(Response& _return, const Request& request);
  int32_t send_degrade_read(const Request& request);
  void recv_degrade_read(Response& _return, const int32_t seqid);
  void merge(Response& _return, const Request& request);
  int32_t send_merge(const Request& request);
  void recv_merge(Response& _return, const int32_t seqid);
  void clear(Response& _return, const Request& request);
  int32_t send_clear(const Request& request);
  void recv_clear(Response& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
