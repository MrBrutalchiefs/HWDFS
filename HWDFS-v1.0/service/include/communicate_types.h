/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef communicate_TYPES_H
#define communicate_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace comm {

struct ResponseCode {
  enum type {
    SUCCESS = 1,
    NEED_D0 = 2,
    ERROR = 3
  };
};

extern const std::map<int, const char*> _ResponseCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ResponseCode::type& val);

std::string to_string(const ResponseCode::type& val);

struct DataType {
  enum type {
    D0 = 1,
    DR = 2,
    P0 = 3,
    PR = 4
  };
};

extern const std::map<int, const char*> _DataType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DataType::type& val);

std::string to_string(const DataType::type& val);

class ChunkInfo;

class Request;

class MetaRequest;

class Response;

class MetaResponse;


class ChunkInfo : public virtual ::apache::thrift::TBase {
 public:

  ChunkInfo(const ChunkInfo&);
  ChunkInfo& operator=(const ChunkInfo&);
  ChunkInfo() : file_id(0), user_id(0), segment_id(0), chunk_id(0), offset(0), length(0) {
  }

  virtual ~ChunkInfo() noexcept;
  int16_t file_id;
  int16_t user_id;
  int16_t segment_id;
  int16_t chunk_id;
  int64_t offset;
  int64_t length;

  void __set_file_id(const int16_t val);

  void __set_user_id(const int16_t val);

  void __set_segment_id(const int16_t val);

  void __set_chunk_id(const int16_t val);

  void __set_offset(const int64_t val);

  void __set_length(const int64_t val);

  bool operator == (const ChunkInfo & rhs) const
  {
    if (!(file_id == rhs.file_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(segment_id == rhs.segment_id))
      return false;
    if (!(chunk_id == rhs.chunk_id))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const ChunkInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChunkInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChunkInfo &a, ChunkInfo &b);

std::ostream& operator<<(std::ostream& out, const ChunkInfo& obj);


class Request : public virtual ::apache::thrift::TBase {
 public:

  Request(const Request&);
  Request& operator=(const Request&);
  Request() : from_id(0), to_id(0), scheme(), length(0), offset(0), type((DataType::type)0), partId(0) {
  }

  virtual ~Request() noexcept;
  int16_t from_id;
  int16_t to_id;
  std::string scheme;
  std::vector<int8_t>  data;
  int64_t length;
  int64_t offset;
  DataType::type type;
  int32_t partId;

  void __set_from_id(const int16_t val);

  void __set_to_id(const int16_t val);

  void __set_scheme(const std::string& val);

  void __set_data(const std::vector<int8_t> & val);

  void __set_length(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_type(const DataType::type val);

  void __set_partId(const int32_t val);

  bool operator == (const Request & rhs) const
  {
    if (!(from_id == rhs.from_id))
      return false;
    if (!(to_id == rhs.to_id))
      return false;
    if (!(scheme == rhs.scheme))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(partId == rhs.partId))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Request &a, Request &b);

std::ostream& operator<<(std::ostream& out, const Request& obj);


class MetaRequest : public virtual ::apache::thrift::TBase {
 public:

  MetaRequest(const MetaRequest&);
  MetaRequest& operator=(const MetaRequest&);
  MetaRequest() : user_id(0), file_name(), offset(0), length(0) {
  }

  virtual ~MetaRequest() noexcept;
  int16_t user_id;
  std::string file_name;
  int64_t offset;
  int64_t length;

  void __set_user_id(const int16_t val);

  void __set_file_name(const std::string& val);

  void __set_offset(const int64_t val);

  void __set_length(const int64_t val);

  bool operator == (const MetaRequest & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const MetaRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MetaRequest &a, MetaRequest &b);

std::ostream& operator<<(std::ostream& out, const MetaRequest& obj);


class Response : public virtual ::apache::thrift::TBase {
 public:

  Response(const Response&);
  Response& operator=(const Response&);
  Response() : code((ResponseCode::type)0) {
  }

  virtual ~Response() noexcept;
  ResponseCode::type code;
  std::vector<int8_t>  data;

  void __set_code(const ResponseCode::type val);

  void __set_data(const std::vector<int8_t> & val);

  bool operator == (const Response & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Response &a, Response &b);

std::ostream& operator<<(std::ostream& out, const Response& obj);


class MetaResponse : public virtual ::apache::thrift::TBase {
 public:

  MetaResponse(const MetaResponse&);
  MetaResponse& operator=(const MetaResponse&);
  MetaResponse() : code((ResponseCode::type)0) {
  }

  virtual ~MetaResponse() noexcept;
  std::vector<ChunkInfo>  info_list;
  ResponseCode::type code;

  void __set_info_list(const std::vector<ChunkInfo> & val);

  void __set_code(const ResponseCode::type val);

  bool operator == (const MetaResponse & rhs) const
  {
    if (!(info_list == rhs.info_list))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const MetaResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MetaResponse &a, MetaResponse &b);

std::ostream& operator<<(std::ostream& out, const MetaResponse& obj);

} // namespace

#endif
